/**
 * This is not a production server yet!
 * This is only a minimal backend to get started.
 */

import { Logger, ValidationPipe } from '@nestjs/common';
import { NestFactory } from '@nestjs/core';
import { AppModule } from '@api/app/app.module';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import cookieParser from 'cookie-parser';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.use(cookieParser());

  const globalPrefix = 'api';
  app.setGlobalPrefix(globalPrefix);
  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ValidationPipe.
  // –¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ ValidationPipe –≤ –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å (–∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true, // –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—è, –Ω–µ –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ DTO
      forbidNonWhitelisted: true, // –ë—Ä–æ—Å–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏—à–Ω–∏–µ –ø–æ–ª—è
      transform: true, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∏–ø–∞–º–∏ DTO
      disableErrorMessages: false, // –û—Ç–∫–ª—é—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö (false - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å)
      transformOptions: {
        enableImplicitConversion: true, // –í–∫–ª—é—á–∞–µ—Ç –Ω–µ—è–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
      },
    })
  );
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Swagger
  const config = new DocumentBuilder()
    .setTitle('My API')
    .setDescription('API description')
    .setVersion('1.0')
    .addTag('auth')
    .addTag('users')
    .build();

  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api', app, document);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  app.enableCors({
    origin: 'http://localhost:3000', // –†–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ 3000 –ø–æ—Ä—Ç—É
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',
    credentials: true, // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—É–∫–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    allowedHeaders: 'Content-Type, Authorization',
  });

  const port = process.env.PORT || 5000;
  await app.listen(port);
  Logger.log(
    `üöÄ Application is running on: http://localhost:${port}/${globalPrefix}`
  );
}

bootstrap();
